import streamlit as st
from docx import Document
from docx.shared import Pt
from io import BytesIO

st.set_page_config(page_title="MS WORD Format Checker")

st.title("ЁЯз╛ MS WORD Format Checker")
st.write("рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рд╡рд┐рд╡рд░рдг рднрд░реЗрдВ рдФрд░ .docx рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ:")

name = st.text_input("ЁЯСд рдЫрд╛рддреНрд░ рдХрд╛ рдирд╛рдо")
roll = st.text_input("ЁЯЖФ рд░реЛрд▓ рдирдВрдмрд░")
uploaded_file = st.file_uploader("рдЕрдкрдиреА Word рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (.docx)", type=["docx"])

def check_formatting(file):
    doc = Document(file)
    score = 0
    feedback = []

    section = doc.sections[0]

    # Q1(A): Page size A3
    width = round(section.page_width.inches, 1)
    height = round(section.page_height.inches, 1)
    if width == 11.7 and height == 16.5:
        score += 2
        feedback.append("тЬЕ Q1(A): рдкреЗрдЬ рд╕рд╛рдЗрдЬ A3 рд╕реЗрдЯ рд╣реИ")
    else:
        feedback.append("тЭМ Q1(A): рдкреЗрдЬ рд╕рд╛рдЗрдЬ A3 рдирд╣реАрдВ рд╣реИ")

    # Q1(B): Paragraph border in 2nd paragraph
    if len(doc.paragraphs) > 1 and 'w:top' in doc.paragraphs[1]._element.xml:
        score += 2
        feedback.append("тЬЕ Q1(B): рджреВрд╕рд░реЗ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдореЗрдВ рдмреЙрд░реНрдбрд░ рд╣реИ")
    else:
        feedback.append("тЭМ Q1(B): рджреВрд╕рд░реЗ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдореЗрдВ рдмреЙрд░реНрдбрд░ рдирд╣реАрдВ рд╣реИ")

    # Q1(C): Top margin 0.6
    top_margin = round(section.top_margin.inches, 1)
    if top_margin == 0.6:
        score += 2
        feedback.append("тЬЕ Q1(C): рдЯреЙрдк рдорд╛рд░реНрдЬрд┐рди 0.6 рд╣реИ")
    else:
        feedback.append("тЭМ Q1(C): рдЯреЙрдк рдорд╛рд░реНрдЬрд┐рди 0.6 рдирд╣реАрдВ рд╣реИ")

    # Q1(D): 'Define' bold and highlighted in para 4
    if len(doc.paragraphs) > 3:
        found = any("Define" in run.text and run.bold and run.font.highlight_color for run in doc.paragraphs[3].runs)
        if found:
            score += 4
            feedback.append("тЬЕ Q1(D): 'Define' рдмреЛрд▓реНрдб рдФрд░ рд╣рд╛рдИрд▓рд╛рдЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ")
        else:
            feedback.append("тЭМ Q1(D): 'Define' рдмреЛрд▓реНрдб рдФрд░ рд╣рд╛рдИрд▓рд╛рдЗрдЯ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛")

    return score, feedback

if uploaded_file and name and roll:
    score, results = check_formatting(BytesIO(uploaded_file.read()))
    st.success(f"ЁЯОп {name} (Roll: {roll}) тАУ Total Score: {score}/50")
    st.write("### ЁЯУЛ рдлреАрдбрдмреИрдХ:")
    for r in results:
        st.write(r)

    # Downloadable report
    report = f"рдирд╛рдо: {name}\nрд░реЛрд▓: {roll}\nрдЕрдВрдХ: {score}/50\n\n" + "\n".join(results)
    st.download_button("ЁЯУе рд░рд┐рдкреЛрд░реНрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ", report, file_name=f"{roll}_report.txt", mime="text/plain")
elif uploaded_file and (not name or not roll):
    st.warning("рдХреГрдкрдпрд╛ рдирд╛рдо рдФрд░ рд░реЛрд▓ рдирдВрдмрд░ рднрд░реЗрдВ")
